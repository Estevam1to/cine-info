import json
from http import HTTPStatus

from fastapi import HTTPException
from google.genai import Client, types

from config.logs import logger
from config.settings import settings
from schemas.movie import LLmMovieResponse


class AIService:
    """
    Service for interacting with Google Gemini API to get movie information.
    """

    def _clean_markdown_response(self, response: str) -> str:
        """
        Remove markdown formatting from API response.

        Args:
            response (str): Raw API response.

        Returns:
            str: Clean response without markdown.
        """
        json_str = response.strip()
        if json_str.startswith("```json"):
            json_str = json_str.replace("```json", "").replace("```", "").strip()
        elif json_str.startswith("```"):
            json_str = json_str.replace("```", "").strip()
        return json_str

    def generate_response(self, text: str) -> LLmMovieResponse:
        """
        Generate a response using Google Gemini API.

        Args:
            text (str): Input text to generate response.

        Returns:
            str: Response generated by the API.

        Exceptions:
            HTTPException: Internal server error when generating response.
        """
        try:
            client = Client(api_key=settings.GOOGLE_API_KEY)

            retrieval_tool = types.Tool(
                google_search_retrieval=types.GoogleSearchRetrieval(
                    dynamic_retrieval_config=types.DynamicRetrievalConfig(
                        mode=types.DynamicRetrievalConfigMode.MODE_DYNAMIC,
                        dynamic_threshold=0.3,
                    )
                )
            )

            config = types.GenerateContentConfig(tools=[retrieval_tool])

            contents = [
                types.Content(parts=[types.Part(text=text)], role="user"),
            ]

            response = client.models.generate_content(
                model=settings.GOOGLE_API_MODEL,
                contents=contents,
                config=config,
            )

            return response.text
        except Exception as e:
            logger.error(f"Error generating response: {str(e)}")
            raise HTTPException(
                status_code=HTTPStatus.INTERNAL_SERVER_ERROR,
                detail=f"Error generating response: {str(e)}",
            )

    def get_movie_info(
        self,
        title: str,
    ) -> LLmMovieResponse:
        """
        Get movie information using Google Gemini API.

        Args:
            title (str): Movie title.

        Returns:
            LLmMovieResponse: Movie information including title, release date, box office and synopsis.

        Exceptions:
            HTTPException: Internal server error when getting movie information.
        """
        logger.info(f"Getting movie information for: {title}")
        try:
            input_text = (
                f"Please provide detailed information about the movie '{title}'. "
                f"Respond with a JSON object containing the following fields: "
                f"'title' (string), 'release_date' (string), 'box_office' (string), 'synopsis' (string). "
                f"Make sure the response contains only valid JSON, without additional text or explanations. "
                f"Respond in Portuguese."
            )

            response = self.generate_response(text=input_text)
            logger.info(f"Response received: {response}")

            json_str = self._clean_markdown_response(response)
            movie_data = json.loads(json_str)

            if isinstance(movie_data.get("box_office"), (int, float)):
                movie_data["box_office"] = str(movie_data["box_office"])

            return LLmMovieResponse(**movie_data)

        except json.JSONDecodeError as e:
            logger.error(f"Error decoding JSON: {str(e)}")
            raise HTTPException(
                status_code=HTTPStatus.INTERNAL_SERVER_ERROR,
                detail=f"Error processing API response: {str(e)}",
            )
        except Exception as e:
            logger.error(f"Error getting movie information: {str(e)}")
            raise HTTPException(
                status_code=HTTPStatus.INTERNAL_SERVER_ERROR,
                detail=f"Error getting movie information: {str(e)}",
            )
