import json
import traceback
from http import HTTPStatus

from fastapi import HTTPException
from google.genai import Client, types

from config.logs import logger
from config.settings import settings
from schemas.movie import LLmMovieResponse


class AIService:
    """
    Service for interacting with Google Gemini API to get movie information.
    """

    def generate_response(self, text: str) -> LLmMovieResponse:
        """
        Generate a response using Google Gemini API.

        Args:
            text (str): Input text to generate response.

        Returns:
            str: Response generated by the API.

        Exceptions:
            HTTPException: Internal server error when generating response.
        """
        try:
            client = Client(api_key=settings.GOOGLE_API_KEY)

            config = types.GenerateContentConfig(
                temperature=0.7,
                response_mime_type="application/json",
                response_schema=LLmMovieResponse,
            )

            contents = [
                types.Content(parts=[types.Part(text=text)], role="user"),
            ]

            response = client.models.generate_content(
                model=settings.GOOGLE_API_MODEL,
                contents=contents,
                config=config,
            )

            return response.text
        except Exception as e:
            logger.error(f"Error generating response: {str(e)}")
            logger.error(traceback.format_exc())
            raise HTTPException(
                status_code=HTTPStatus.INTERNAL_SERVER_ERROR,
                detail=f"Error generating response: {str(e)}",
            )

    def get_movie_info(
        self,
        title: str,
    ) -> LLmMovieResponse:
        """
        Get movie information using Google Gemini API.

        Args:
            title (str): Movie title.

        Returns:
            LLmMovieResponse: Movie information including title, release date, box office and synopsis.

        Exceptions:
            HTTPException: Internal server error when getting movie information.
        """
        logger.info(f"Getting movie information for: {title}")
        try:
            input_text = f"""Please provide detailed information about the movie '{title}'.
            Return a JSON object with the following fields:
            - title (string): The movie's title in Portuguese
            - release_date (string): Release date in YYYY-MM-DD format
            - box_office (string): Box office revenue with currency symbol
            - synopsis (string): A brief plot summary in Portuguese

            Example response:
            {{
                "title": "O Rei Leão",
                "release_date": "2019-07-19",
                "box_office": "$1,662,000,000",
                "synopsis": "Simba, o jovem leão, é herdeiro do trono do Reino da Pedra e precisa lutar contra o malvado Scar para recuperar seu direito ao trono."
            }}

            Return only valid JSON without additional text or markdown formatting.
            """

            response = self.generate_response(text=input_text)
            logger.info(f"Response received: {response}")

            return json.loads(response)

        except json.JSONDecodeError as e:
            logger.error(f"Error decoding JSON: {str(e)}")
            logger.error(traceback.format_exc())
            raise HTTPException(
                status_code=HTTPStatus.INTERNAL_SERVER_ERROR,
                detail=f"Error processing API response: {str(e)}",
            )
        except Exception as e:
            logger.error(f"Error getting movie information: {str(e)}")
            logger.error(traceback.format_exc())
            raise HTTPException(
                status_code=HTTPStatus.INTERNAL_SERVER_ERROR,
                detail=f"Error getting movie information: {str(e)}",
            )
